tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - https://raw.githubusercontent.com/micado-scale/tosca/v0.x.2/micado_types.yaml

repositories:
  docker_hub: https://hub.docker.com/

topology_template:
  node_templates:
    stressng:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
        args: ['--cpu', '0', '--cpu-method', 'pi', '-l', '20']
        resources:
          requests:
            cpu: "900m"
      artifacts:
       image:
         type: tosca.artifacts.Deployment.Image.Container.Docker
         file: lorel/docker-stress-ng
         repository: docker_hub
      interfaces:
        Kubernetes:
          create:
            implementation: image
            inputs:
              strategy:
                type: Recreate

    worker_node:
      type: tosca.nodes.MiCADO.Nova.Compute
      properties:
        image_id: 9c2ded59-d119-4170-ad22-65a834ed2d90
        flavor_name: 3
        project_id: 75e3d2ba0c724c22bcd53c4a708467d7
        network_id: e2d22d43-e378-44ad-876f-97d5479f3b51
        key_name: abdo-key-pair
        security_groups:
          - 1fe440c9-f324-411b-b404-e9dd353ce8f5
      interfaces:
        Occopus:
          create:
            inputs:
              interface_cloud: nova
              endpoint_cloud: https://cloud.ecs.westminster.ac.uk:5000/v3
      capabilities:
        host:
          properties:
            num_cpus: 2
            mem_size: 2 GB

  policies:
    - scalability:
        type: tosca.policies.Scaling.MiCADO.VirtualMachine.CPU.stressng
        targets: [ worker_node ]
        properties:
          constants:
            NODE_TH_MAX: '60'
            NODE_TH_MIN: '25'
          min_instances: 1
          max_instances: 3
    - scalability:
        type: tosca.policies.Scaling.MiCADO.Container.CPU.stressng
        targets: [ stressng ]
        properties:
          constants:
            SERVICE_NAME: 'stressng'
            SERVICE_FULL_NAME: 'stressng'
            SERVICE_TH_MAX: '60'
            SERVICE_TH_MIN: '25'
          min_instances: 1
          max_instances: 3

policy_types:
  tosca.policies.Scaling.MiCADO.Container.CPU.stressng:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for container CPU
        default:
        - alert: service_overloaded
          expr: 'avg(rate(container_cpu_usage_seconds_total{container_label_io_kubernetes_container_name="{{SERVICE_FULL_NAME}}"}[30s]))*100 > {{SERVICE_TH_MAX}}'
          for: 30s
        - alert: service_underloaded
          expr: 'avg(rate(container_cpu_usage_seconds_total{container_label_io_kubernetes_container_name="{{SERVICE_FULL_NAME}}"}[30s]))*100 < {{SERVICE_TH_MIN}}'
          for: 30s
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for container CPU
        default: |
          if len(m_nodes) == m_node_count:
            if service_overloaded and m_node_count > m_container_count:
              m_container_count+=1
            if service_underloaded:
              m_container_count-=1
          else:
            print('Transient phase, skipping update of containers...')
        required: true

  tosca.policies.Scaling.MiCADO.VirtualMachine.CPU.stressng:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for VM CPU
        default:
        - alert: node_overloaded
          expr: '(100-(avg(rate(node_cpu{group="worker_cluster",mode="idle"}[60s]))*100)) > {{NODE_TH_MAX}}'
          for: 1m
        - alert: node_underloaded
          expr: '(100-(avg(rate(node_cpu{group="worker_cluster",mode="idle"}[60s]))*100)) < {{NODE_TH_MIN}}'
          for: 1m
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for VM CPU
        default: |
          if len(m_nodes) <= m_node_count and m_time_since_node_count_changed > 60:
            if node_overloaded:
              m_node_count+=1
            if node_underloaded:
              m_node_count-=1
          else:
            print('Transient phase, skipping update of nodes...')
        required: true